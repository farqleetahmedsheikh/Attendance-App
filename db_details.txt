-- 1. Create and select the database
CREATE DATABASE IF NOT EXISTS attandence_app;
USE attandence_app;

-- 2. Admin Table
CREATE TABLE AdminTable (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(100),
    Password VARCHAR(100),
    CNIC VARCHAR(20),
    Email VARCHAR(100) UNIQUE,
    PhoneNo VARCHAR(20)
);

-- 3. Class Table
CREATE TABLE ClassTable (
    ClassID INT PRIMARY KEY AUTO_INCREMENT,
    ClassName VARCHAR(100)
);

-- 4. Subject Table
CREATE TABLE SubjectTable (
    SubjectID INT PRIMARY KEY AUTO_INCREMENT,
    SubjectName VARCHAR(100),
    SubjectCode VARCHAR(50) UNIQUE,
    ClassID INT,
    FOREIGN KEY (ClassID) REFERENCES ClassTable(ClassID) ON DELETE CASCADE
);

-- 5. Teacher Table
CREATE TABLE TeacherTable (
    TeacherID INT PRIMARY KEY AUTO_INCREMENT,
    TeacherName VARCHAR(100),
    TeacherEmail VARCHAR(100),
    Password VARCHAR(100),
    TeacherDOB DATE,
    TeacherPhoneNo VARCHAR(20),
    TeacherStatus VARCHAR(50),
    TeacherType VARCHAR(50),
    TeacherImage VARCHAR(255),
    TeacherCNIC VARCHAR(20),
    Religion VARCHAR(50),
    Gender VARCHAR(20),
    Address TEXT
);

-- 6. Teacher-Subject Linking Table
CREATE TABLE TeacherSubjectTable (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    TeacherID INT,
    SubjectID INT,
    FOREIGN KEY (TeacherID) REFERENCES TeacherTable(TeacherID) ON DELETE CASCADE,
    FOREIGN KEY (SubjectID) REFERENCES SubjectTable(SubjectID) ON DELETE CASCADE
);

-- 7. Class Detail Table
CREATE TABLE ClassDetailTable (
    ClassDetailID INT PRIMARY KEY AUTO_INCREMENT,
    ClassID INT,
    TeacherID INT,
    FOREIGN KEY (ClassID) REFERENCES ClassTable(ClassID) ON DELETE CASCADE,
    FOREIGN KEY (TeacherID) REFERENCES TeacherTable(TeacherID)
);

-- 8. Teacher Detail Table
CREATE TABLE TeacherDetail (
    TeacherDetailID INT PRIMARY KEY AUTO_INCREMENT,
    TeacherID INT,
    SubjectID INT,
    FOREIGN KEY (TeacherID) REFERENCES TeacherTable(TeacherID),
    FOREIGN KEY (SubjectID) REFERENCES SubjectTable(SubjectID)
);

-- 9. Parent Table
CREATE TABLE ParentTable (
    ParentID INT PRIMARY KEY AUTO_INCREMENT,
    ParentName VARCHAR(100),
    ParentEmail VARCHAR(100),
    Password VARCHAR(100),
    ParentPhoneNo VARCHAR(20),
    ParentCNIC VARCHAR(20),
    Religion VARCHAR(50),
    Gender VARCHAR(20),
    Address TEXT
);

-- 10. Student Table
CREATE TABLE Std_Table (
    Std_ID INT PRIMARY KEY AUTO_INCREMENT,
    Std_Name VARCHAR(100),
    Std_Email VARCHAR(100),
    Std_B_Form VARCHAR(50),
    Std_DOB DATE,
    Batch VARCHAR(50),
    Session VARCHAR(50),
    RollNo VARCHAR(50),
    GuardianContact VARCHAR(50),
    Password VARCHAR(100),
    Type VARCHAR(50),
    Status VARCHAR(50) DEFAULT 'Inactive',
    Registration_Date DATE DEFAULT CURRENT_DATE,
    Registration_Time TIME DEFAULT CURRENT_TIME,
    StdImages VARCHAR(255),
    ClassID INT,
    ParentID INT,
    Religion VARCHAR(50),
    Gender VARCHAR(20),
    Address TEXT,
    GuardianName VARCHAR(100),
    FOREIGN KEY (ClassID) REFERENCES ClassTable(ClassID) ON DELETE SET NULL,
    FOREIGN KEY (ParentID) REFERENCES ParentTable(ParentID) ON DELETE SET NULL ON UPDATE CASCADE
);

-- 11. Parent-Teacher Meeting (PTM) Table
CREATE TABLE PTM_Table (
    PTMID INT PRIMARY KEY AUTO_INCREMENT,
    PTMDate DATE NOT NULL,
    PTMTime TIME NOT NULL,
    Description TEXT,
    ParentID INT NOT NULL,
    TeacherID INT NOT NULL,
    FOREIGN KEY (ParentID) REFERENCES ParentTable(ParentID) ON DELETE CASCADE,
    FOREIGN KEY (TeacherID) REFERENCES TeacherTable(TeacherID) ON DELETE CASCADE
);

-- 12. Attendance Table
CREATE TABLE AttendanceTable (
    AttendanceID INT PRIMARY KEY AUTO_INCREMENT,
    AttendanceDate DATE NOT NULL,
    IsPresent VARCHAR(255) NOT NULL,
    StudentID INT NOT NULL,
    SubjectID INT NOT NULL,
    FOREIGN KEY (StudentID) REFERENCES Std_Table(Std_ID) ON DELETE CASCADE,
    FOREIGN KEY (SubjectID) REFERENCES SubjectTable(SubjectID) ON DELETE CASCADE
) ENGINE=InnoDB;

-- 13. Query Table (Conversation Threads)
CREATE TABLE Queries (
    QueryID INT AUTO_INCREMENT PRIMARY KEY,
    Subject VARCHAR(255) NOT NULL,
    Message VARCHAR(255) NOT NULL,
    ParentID INT NOT NULL,
    TeacherID INT NOT NULL,
    Status ENUM('Read', 'Unread') DEFAULT 'Unread',
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (ParentID) REFERENCES ParentTable(ParentID) ON DELETE CASCADE,
    FOREIGN KEY (TeacherID) REFERENCES TeacherTable(TeacherID) ON DELETE CASCADE
);

-- 14. Query Message Table (Replies inside each thread)
CREATE TABLE QueryMessages (
    MessageID INT AUTO_INCREMENT PRIMARY KEY,
    QueryID INT NOT NULL,
    SenderRole ENUM('Parent', 'Teacher') NOT NULL,
    SenderID INT NOT NULL,
    Message TEXT NOT NULL,
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (QueryID) REFERENCES Queries(QueryID) ON DELETE CASCADE
);
